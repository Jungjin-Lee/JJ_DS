// Private
var rooms = new Array();

function make(player) {
    this.isEmpty = false;
    this.player1 = player;
    this.player2 = null;
    this.playerCnt = 1;
    this.turn = 1;
}

// Public
module.exports = {
    Logging: true,

    bar: function () {
        console.log("bar");
    },

    getRoomCnt: function () {
        return rooms.length;
    },

    connect: function(player) {
        var len = rooms.length;
        for(var i = 0; i < len; i++) {
            var room = rooms[i];
            if(!room.isEmpty && room.player2 == null) {
                room.player2 = player;
                room.playerCnt = 2;
                player.room = room;
                player.roomNumber = i;
                player.isRoom = true;
                player.slot = 2;
                if(this.Logging) console.log("roomconnect success : " + player.roomNumber + " slot:" + player.slot);
                return room;
            }
        }
        if(this.Logging) console.log("roomconnect not empty : ");
        return null;
    },

    join: function(player) {
        var exist = false;
        var len = rooms.length;
        for(var i = 0; i < len; i++) {
            var room = rooms[i];
            if(room.isEmpty) {
                room.roomNumber = i;
                room.isEmpty = false;
                room.player1 = player;
                room.player2 = null;
                room.playerCnt = 1;
                room.turn = 1;

                player.room = room;
                player.roomNumber = i;
                player.isRoom = true;
                player.slot = 1;
                if(this.Logging) console.log("roomjoin recycle : " + room.roomNumber);
                return room;
            }
        }
        var newRoom = new make(player);
        // var newRoom = {};
        // newRoom.isEmpty = false;
        // newRoom.player1 = player;
        // newRoom.player2 = null;
        // newRoom.playerCnt = 1;
        // console.log(newRoom);
        // console.log(newRoom.isEmpty);
        // console.log(newRoom.player1);
        // console.log(newRoom.playerCnt);

        rooms.push(newRoom);
        newRoom.roomNumber = rooms.length - 1;
        player.room = newRoom;
        player.roomNumber = rooms.length - 1;
        player.isRoom = true;
        player.slot = 1;
        if(this.Logging) console.log("roomjoin make : " + newRoom.roomNumber);
        return newRoom;
    },

    getPlayerAtSock: function(sock) {
        var len = players.length;
        for(var i = 0; i < len; i++) {
            var player = players[i];
            if(player.remoteAddress == sock.remoteAddress && player.remotePort == sock.remotePort) {
                return player;
            }
        }
    },

    getMySlotAtRoom: function(room, player) {
        if(room.player1 && room.player1 == player) {
            return 1;
        } else if(room.player2 && room.player2 == player) {
            return 2;
        }
    },

    allSend: function(room, data) {
        for(var i = 1; i <= 2; i++) {
            if(room['player' + i]) {
                room['player' + i].socket.write(data);
            }
        }
    },

    clear: function() {
        console.log("clear");
    }
}
